import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth/config'
import { getFileFromGridFS, deleteFileFromGridFS } from '@/lib/db/gridfs'
import connectToDatabase from '@/lib/db/mongodb'
import Course from '@/models/Course'
import User from '@/models/User'

// GET - –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ fileId: string }> }
) {
  try {
    const { fileId } = await params
    const session = await getServerSession(authOptions)

    if (!session?.user?.email) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    await connectToDatabase()

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ email: session.user.email })
    if (!user) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = user.role === 'admin' || session.user.email === 'stanislavsk1981@gmail.com'

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏ –µ–≥–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const { stream, metadata } = await getFileFromGridFS(fileId)
    
    if (!metadata.metadata) {
      return NextResponse.json(
        { error: 'File metadata not found' },
        { status: 404 }
      )
    }

    const { lessonId, courseId } = metadata.metadata

    // –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä—Å
    const course = await Course.findById(courseId)
    if (!course) {
      return NextResponse.json(
        { error: 'Course not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É
    let hasAccess = false

    if (isAdmin) {
      hasAccess = true
      console.log('üîß Admin access granted for file:', fileId)
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—É–ø–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫—É—Ä—Å
      hasAccess = user.purchasedCourses?.includes(course._id.toString()) || false
      console.log('üîß User file access check:', {
        userId: user._id,
        courseId: course._id,
        hasAccess,
        purchasedCourses: user.purchasedCourses
      })
    }

    if (!hasAccess) {
      return NextResponse.json(
        { error: 'Access denied. Course not purchased.' },
        { status: 403 }
      )
    }

    // –°–æ–∑–¥–∞–µ–º ReadableStream –¥–ª—è Next.js
    const readableStream = new ReadableStream({
      start(controller) {
        stream.on('data', (chunk) => {
          controller.enqueue(chunk)
        })
        
        stream.on('end', () => {
          controller.close()
        })
        
        stream.on('error', (error) => {
          controller.error(error)
        })
      }
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    return new Response(readableStream, {
      headers: {
        'Content-Type': metadata.metadata.mimeType,
        'Content-Disposition': `attachment; filename="${metadata.metadata.originalName}"`,
        'Content-Length': metadata.length.toString(),
      }
    })

  } catch (error) {
    console.error('Error downloading file:', error)
    return NextResponse.json(
      { error: 'File not found or access denied' },
      { status: 404 }
    )
  }
}

// DELETE - –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ fileId: string }> }
) {
  try {
    const { fileId } = await params
    const session = await getServerSession(authOptions)

    if (!session?.user?.email) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    await connectToDatabase()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const user = await User.findOne({ email: session.user.email })
    const isAdmin = user?.role === 'admin' || session.user.email === 'stanislavsk1981@gmail.com'

    if (!isAdmin) {
      return NextResponse.json(
        { error: 'Admin access required' },
        { status: 403 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const { metadata } = await getFileFromGridFS(fileId)
    const { lessonId, courseId } = metadata.metadata

    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ GridFS
    await deleteFileFromGridFS(fileId)

    // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ —É—Ä–æ–∫–∞
    await Course.updateOne(
      { _id: courseId, 'lessons.id': lessonId },
      { 
        $pull: { 'lessons.$.files': { id: fileId } }
      }
    )

    console.log('üóëÔ∏è File deleted successfully:', {
      fileId,
      lessonId,
      courseId
    })

    return NextResponse.json({
      success: true,
      message: 'File deleted successfully'
    })

  } catch (error) {
    console.error('Error deleting file:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
} 