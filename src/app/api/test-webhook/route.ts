import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth/config';
import connectToDatabase from '@/lib/db/mongodb';
import User from '@/models/User';
import Course from '@/models/Course';
import Order from '@/models/Order';

export async function POST(req: NextRequest) {
  try {
    const { courseId } = await req.json();
    
    if (!courseId) {
      return NextResponse.json({ error: 'Course ID required' }, { status: 400 });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.email) {
      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });
    }

    await connectToDatabase();

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å
    const [user, course] = await Promise.all([
      User.findOne({ email: session.user.email }),
      Course.findById(courseId)
    ]);

    if (!user || !course) {
      return NextResponse.json({ error: 'User or course not found' }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—É—Ä—Å –µ—â–µ –Ω–µ –∫—É–ø–ª–µ–Ω
    if (user.coursesOwned.includes(course._id)) {
      return NextResponse.json({ error: 'Course already owned' }, { status: 400 });
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    const order = new Order({
      userId: user._id,
      courseId: course._id,
      stripeSessionId: `test_session_${Date.now()}`,
      stripePaymentIntentId: `test_pi_${Date.now()}`,
      amount: course.price * 100, // –≤ —Ü–µ–Ω—Ç–∞—Ö
      currency: 'usd',
      status: 'completed',
      completedAt: new Date()
    });

    await order.save();

    // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user.coursesOwned.push(course._id);
    await user.save();

    console.log('üß™ TEST: Course added to user:', {
      userId: user._id,
      courseId: course._id,
      userEmail: user.email,
      courseTitle: course.title
    });

    return NextResponse.json({ 
      success: true, 
      message: 'Course added successfully (TEST MODE)',
      orderId: order._id
    });

  } catch (error) {
    console.error('Test webhook error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
} 