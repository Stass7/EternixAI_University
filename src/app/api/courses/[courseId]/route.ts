import { NextResponse } from 'next/server'
import connectToDatabase from '@/lib/db/mongodb'
import Course from '@/models/Course'
import User from '@/models/User'
import mongoose from 'mongoose'
import { checkCourseAccess } from '@/lib/course-access'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth/config'

export async function GET(
  request: Request,
  context: { params: Promise<{ courseId: string }> }
) {
  try {
    const params = await context.params
    const courseId = params.courseId
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    if (!mongoose.Types.ObjectId.isValid(courseId)) {
      return NextResponse.json(
        { error: 'Invalid course ID' },
        { status: 400 }
      )
    }
    
    await connectToDatabase()
    
    // –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä—Å –ø–æ ID
    const course = await Course.findById(courseId)
    
    if (!course) {
      return NextResponse.json(
        { error: 'Course not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫—É—Ä—Å—É
    const accessInfo = await checkCourseAccess(courseId)

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
    const session = await getServerSession(authOptions)
    let isAdminFromSession = false
    
    // üî• HARDCODE –°–£–ü–ï–†-–ê–î–ú–ò–ù –î–û–°–¢–£–ü –î–õ–Ø –ì–õ–ê–í–ù–û–ì–û –ê–î–ú–ò–ù–ê
    const isSuperAdmin = session?.user?.email === 'stanislavsk1981@gmail.com'
    
    if (session?.user?.email) {
      if (isSuperAdmin) {
        isAdminFromSession = true
        console.log('üöÄ HARDCODE SUPER ADMIN IN API: stanislavsk1981@gmail.com detected')
      } else {
        const user = await User.findOne({ email: session.user.email })
        isAdminFromSession = user?.role === 'admin'
      }
    }

    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
    let responseData: any = {
      _id: course._id,
      title: course.title,
      description: course.description,
      language: course.language,
      price: course.price,
      originalPrice: course.originalPrice,
      discount: course.discount,
      category: course.category,
      imageUrl: course.imageUrl,
      published: course.published,
      featured: course.featured,
      isNewCourse: course.isNewCourse,
      createdAt: course.createdAt,
      updatedAt: course.updatedAt,
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ
      access: accessInfo
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    // –°–£–ü–ï–†–ê–î–ú–ò–ù –∏–ª–∏ –æ–±—ã—á–Ω—ã–µ –∞–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
    const shouldShowFullData = 
      isSuperAdmin || 
      isAdminFromSession || 
      accessInfo.hasAccess || 
      accessInfo.reason === 'admin_access' || 
      accessInfo.userRole === 'admin'

    // –î–ï–ë–ê–ì –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
    console.log('üîß API DEBUG INFO:')
    console.log('User email:', session?.user?.email)
    console.log('isSuperAdmin (stanislavsk1981@gmail.com):', isSuperAdmin)
    console.log('isAdminFromSession:', isAdminFromSession)
    console.log('accessInfo.hasAccess:', accessInfo.hasAccess)
    console.log('accessInfo.reason:', accessInfo.reason)
    console.log('accessInfo.userRole:', accessInfo.userRole)
    console.log('shouldShowFullData:', shouldShowFullData)
    console.log('Course has lessons:', course.lessons?.length || 0)
    console.log('First lesson videoUrl:', course.lessons?.[0]?.videoUrl || 'EMPTY')

    if (shouldShowFullData) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–∞—Ö –≤–∫–ª—é—á–∞—è videoUrl –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
      responseData.lessons = course.lessons
      console.log('‚úÖ FULL DATA MODE - videoUrl included')
    } else {
      // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      responseData.lessons = course.lessons.map((lesson: any) => ({
        id: lesson.id,
        title: lesson.title,
        description: lesson.description,
        duration: lesson.duration,
        order: lesson.order,
        isNewLesson: lesson.isNewLesson,
        // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º videoUrl —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ (–Ω–µ –∞–¥–º–∏–Ω–æ–≤)
        videoUrl: null
      }))
      console.log('‚ùå LIMITED DATA MODE - videoUrl hidden')
    }

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê –ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í
    if ((isSuperAdmin || isAdminFromSession) && course.lessons) {
      console.log('üöÄ FORCING ADMIN ACCESS - ensuring videoUrl is present')
      responseData.lessons = course.lessons // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—É
      console.log('Admin lessons with videoUrl:', responseData.lessons.map((l: any) => ({ 
        title: l.title, 
        videoUrl: l.videoUrl 
      })))
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
    responseData.lessonsCount = course.lessons.length
    
    console.log('üì§ FINAL RESPONSE lessons count:', responseData.lessons?.length)
    console.log('üì§ FINAL RESPONSE first lesson:', responseData.lessons?.[0])
    
    return NextResponse.json({ course: responseData })
  } catch (error) {
    console.error('Error fetching course:', error)
    return NextResponse.json(
      { error: 'Failed to fetch course' },
      { status: 500 }
    )
  }
} 