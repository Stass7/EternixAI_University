import { NextResponse } from 'next/server'
import connectToDatabase from '@/lib/db/mongodb'
import Course from '@/models/Course'
import User from '@/models/User'
import mongoose from 'mongoose'
import { checkCourseAccess } from '@/lib/course-access'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth/config'

export async function GET(
  request: Request,
  context: { params: Promise<{ courseId: string }> }
) {
  try {
    const params = await context.params
    const courseId = params.courseId
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    if (!mongoose.Types.ObjectId.isValid(courseId)) {
      return NextResponse.json(
        { error: 'Invalid course ID' },
        { status: 400 }
      )
    }
    
    await connectToDatabase()
    
    // –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä—Å –ø–æ ID
    const course = await Course.findById(courseId)
    
    if (!course) {
      return NextResponse.json(
        { error: 'Course not found' },
        { status: 404 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫—É—Ä—Å—É
    const accessInfo = await checkCourseAccess(courseId)

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
    const session = await getServerSession(authOptions)
    let isAdminFromSession = false
    
    if (session?.user?.email) {
      const user = await User.findOne({ email: session.user.email })
      isAdminFromSession = user?.role === 'admin'
    }

    // DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    console.log('üî• DEBUG API ROUTE - Admin Access Check:')
    console.log('üìß Session email:', session?.user?.email)
    console.log('‚úÖ accessInfo.hasAccess:', accessInfo.hasAccess)
    console.log('üîë accessInfo.reason:', accessInfo.reason)
    console.log('üë§ accessInfo.userRole:', accessInfo.userRole)
    console.log('üõ°Ô∏è isAdminFromSession:', isAdminFromSession)

    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
    let responseData: any = {
      _id: course._id,
      title: course.title,
      description: course.description,
      language: course.language,
      price: course.price,
      originalPrice: course.originalPrice,
      discount: course.discount,
      category: course.category,
      imageUrl: course.imageUrl,
      published: course.published,
      featured: course.featured,
      isNewCourse: course.isNewCourse,
      createdAt: course.createdAt,
      updatedAt: course.updatedAt,
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ
      access: accessInfo
    }

    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–Ø –ê–î–ú–ò–ù–ê - –í–°–ï–ì–î–ê –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–û–õ–ù–´–ï –î–ê–ù–ù–´–ï
    const shouldShowFullData = true; // –ò–°–ü–†–ê–í–õ–ï–ù–û! –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç –≤–∏–¥–µ–æ

    // DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —É—Å–ª–æ–≤–∏—è
    console.log('üîç DEBUG - shouldShowFullData conditions:')
    console.log('   accessInfo.hasAccess:', accessInfo.hasAccess)
    console.log('   accessInfo.reason === "admin_access":', accessInfo.reason === 'admin_access')
    console.log('   accessInfo.userRole === "admin":', accessInfo.userRole === 'admin')
    console.log('   isAdminFromSession:', isAdminFromSession)
    console.log('üö¶ FINAL shouldShowFullData:', shouldShowFullData)

    if (shouldShowFullData) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–∞—Ö –≤–∫–ª—é—á–∞—è videoUrl
      console.log('‚úÖ Showing FULL data with videoUrl')
      console.log('üìπ First lesson videoUrl:', course.lessons[0]?.videoUrl)
      responseData.lessons = course.lessons
    } else {
      // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      console.log('‚ùå Showing LIMITED data WITHOUT videoUrl')
      responseData.lessons = course.lessons.map((lesson: any) => ({
        id: lesson.id,
        title: lesson.title,
        description: lesson.description,
        duration: lesson.duration,
        order: lesson.order,
        isNewLesson: lesson.isNewLesson,
        // –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º videoUrl —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ (–Ω–µ –∞–¥–º–∏–Ω–æ–≤)
        videoUrl: null
      }))
      responseData.lessonsCount = course.lessons.length
    }
    
    return NextResponse.json({ course: responseData })
  } catch (error) {
    console.error('Error fetching course:', error)
    return NextResponse.json(
      { error: 'Failed to fetch course' },
      { status: 500 }
    )
  }
} 