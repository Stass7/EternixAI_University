import { NextRequest, NextResponse } from 'next/server';
import Stripe from 'stripe';
import connectToDatabase from '@/lib/db/mongodb';
import User from '@/models/User';
import Course from '@/models/Course';
import Order from '@/models/Order';
import PromoCode from '@/models/PromoCode';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const stripeSecretKey = process.env.STRIPE_SECRET_KEY;
const stripeWebhookSecret = process.env.STRIPE_WEBHOOK_SECRET;

if (!stripeSecretKey) {
  console.warn('STRIPE_SECRET_KEY environment variable is not set');
}

const stripe = stripeSecretKey ? new Stripe(stripeSecretKey, {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é  
}) : null;

export async function POST(req: NextRequest) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Stripe –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  if (!stripe || !stripeWebhookSecret) {
    console.error('Stripe is not properly configured');
    return NextResponse.json({ error: 'Stripe configuration missing' }, { status: 500 });
  }

  const body = await req.text();
  const sig = req.headers.get('stripe-signature');

  let event: Stripe.Event;

  try {
    event = stripe.webhooks.constructEvent(
      body,
      sig!,
      stripeWebhookSecret
    );
  } catch (err) {
    console.error(`Webhook signature verification failed.`, err);
    return NextResponse.json({ error: 'Invalid signature' }, { status: 400 });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è
  console.log('üîî Webhook received event:', event.type, 'Event ID:', event.id);
  
  if (event.type === 'checkout.session.completed') {
    const session = event.data.object as Stripe.Checkout.Session;
    
    try {
      console.log('üí≥ Processing payment for session:', session.id);
      console.log('üìã Session details:', {
        sessionId: session.id,
        paymentStatus: session.payment_status,
        customerEmail: session.customer_details?.email,
        amount: session.amount_total,
        currency: session.currency,
        metadata: session.metadata
      });
      
      await connectToDatabase();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
      const metadata = session.metadata;
      const courseId = metadata?.courseId;
      const userId = metadata?.userId;
      
      console.log('üîç Extracted metadata:', { courseId, userId });
      
      if (!courseId || !userId) {
        console.error('‚ùå Missing required metadata in session:', session.id, 'Metadata:', metadata);
        return NextResponse.json({ error: 'Missing metadata' }, { status: 400 });
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫—É—Ä—Å
      console.log('üîç Searching for user and course:', { userId, courseId });
      
      const [user, course] = await Promise.all([
        User.findById(userId),
        Course.findById(courseId)
      ]);

      console.log('üë§ User found:', user ? { id: user._id, email: user.email, coursesOwned: user.coursesOwned.length } : 'NOT FOUND');
      console.log('üìö Course found:', course ? { id: course._id, title: course.title } : 'NOT FOUND');

      if (!user || !course) {
        console.error('‚ùå User or course not found:', { userId, courseId, userFound: !!user, courseFound: !!course });
        return NextResponse.json({ error: 'User or course not found' }, { status: 404 });
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–∞
      const order = new Order({
        userId: user._id,
        courseId: course._id,
        stripeSessionId: session.id,
        stripePaymentIntentId: session.payment_intent,
        amount: session.amount_total || 0,
        currency: session.currency || 'rub',
        status: 'completed',
        completedAt: new Date()
      });

      // –ï—Å–ª–∏ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥
      if (metadata?.promoCodeId) {
        order.promoCodeId = metadata.promoCodeId;
        order.discountAmount = session.total_details?.amount_discount || 0;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await PromoCode.findByIdAndUpdate(
          metadata.promoCodeId,
          {
            $inc: { usedCount: 1 },
            $push: { usedBy: user._id }
          }
        );
      }

      await order.save();

      // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å –∫ –∫—É–ø–ª–µ–Ω–Ω—ã–º –∫—É—Ä—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
      const courseAlreadyOwned = user.coursesOwned.includes(course._id);
      console.log('üè† Course ownership check:', { 
        courseId: course._id, 
        alreadyOwned: courseAlreadyOwned,
        currentCoursesOwned: user.coursesOwned.map((id: any) => id.toString())
      });
      
      if (!courseAlreadyOwned) {
        console.log('‚ûï Adding course to user coursesOwned');
        user.coursesOwned.push(course._id);
        await user.save();
        console.log('‚úÖ Course added successfully. New coursesOwned:', user.coursesOwned.map((id: any) => id.toString()));
      } else {
        console.log('‚ö†Ô∏è Course already owned by user');
      }

      console.log('üéâ Payment processed successfully:', {
        sessionId: session.id,
        userId: user._id,
        courseId: course._id,
        amount: session.amount_total,
        email: session.customer_details?.email,
        courseAdded: !courseAlreadyOwned
      });

      // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏
      
    } catch (error) {
      console.error('Error processing payment:', error);
      return NextResponse.json({ error: 'Processing failed' }, { status: 500 });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
  if (event.type === 'checkout.session.expired' || event.type === 'payment_intent.payment_failed') {
    const session = event.data.object as Stripe.Checkout.Session;
    
    try {
      await connectToDatabase();
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const metadata = session.metadata;
      if (metadata?.courseId && metadata?.userId) {
        const order = new Order({
          userId: metadata.userId,
          courseId: metadata.courseId,
          stripeSessionId: session.id,
          amount: session.amount_total || 0,
          currency: session.currency || 'rub',
          status: 'failed'
        });
        
        await order.save();
        console.log('Failed payment recorded:', session.id);
      }
    } catch (error) {
      console.error('Error recording failed payment:', error);
    }
  }

  return NextResponse.json({ received: true });
} 