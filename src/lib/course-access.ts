import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth/config'
import connectToDatabase from '@/lib/db/mongodb'
import User from '@/models/User'
import Course from '@/models/Course'
import mongoose from 'mongoose'

export interface CourseAccessResult {
  hasAccess: boolean
  reason: 'admin_access' | 'purchased' | 'not_purchased' | 'not_authenticated' | 'user_not_found' | 'course_not_found'
  message: string
  courseTitle?: string
  coursePrice?: number
  userRole?: 'admin' | 'user'
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫—É—Ä—Å—É
 * @param courseId - ID –∫—É—Ä—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns Promise<CourseAccessResult> - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
 */
export async function checkCourseAccess(courseId: string): Promise<CourseAccessResult> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID –∫—É—Ä—Å–∞
    if (!mongoose.Types.ObjectId.isValid(courseId)) {
      return {
        hasAccess: false,
        reason: 'course_not_found',
        message: 'Invalid course ID'
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const session = await getServerSession(authOptions)
    
    if (!session?.user?.email) {
      return {
        hasAccess: false,
        reason: 'not_authenticated',
        message: 'You must be logged in to access courses'
      }
    }

    // üî• HARDCODE –°–£–ü–ï–†-–ê–î–ú–ò–ù –î–û–°–¢–£–ü –î–õ–Ø –ì–õ–ê–í–ù–û–ì–û –ê–î–ú–ò–ù–ê
    if (session.user.email === 'stanislavsk1981@gmail.com') {
      console.log('üöÄ HARDCODE SUPER ADMIN ACCESS: stanislavsk1981@gmail.com detected')
      
      await connectToDatabase()
      const course = await Course.findById(courseId)
      
      return {
        hasAccess: true,
        reason: 'admin_access',
        message: 'Super Admin has full access',
        courseTitle: course?.title || 'Unknown',
        userRole: 'admin'
      }
    }

    await connectToDatabase()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    const course = await Course.findById(courseId)
    if (!course) {
      return {
        hasAccess: false,
        reason: 'course_not_found',
        message: 'Course not found'
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ email: session.user.email })
    if (!user) {
      return {
        hasAccess: false,
        reason: 'user_not_found',
        message: 'User not found'
      }
    }

    // –ê–¥–º–∏–Ω—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º
    if (user.role === 'admin') {
      return {
        hasAccess: true,
        reason: 'admin_access',
        message: 'Admin has full access',
        courseTitle: course.title,
        userRole: 'admin'
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º
    const hasAccess = user.coursesOwned.includes(course._id)

    return {
      hasAccess,
      reason: hasAccess ? 'purchased' : 'not_purchased',
      message: hasAccess 
        ? 'You have access to this course' 
        : 'You need to purchase this course to access it',
      courseTitle: course.title,
      coursePrice: course.price,
      userRole: user.role
    }

  } catch (error) {
    console.error('Error checking course access:', error)
    return {
      hasAccess: false,
      reason: 'course_not_found',
      message: 'Failed to check course access'
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—Ä–æ–∫—É –∫—É—Ä—Å–∞
 * @param courseId - ID –∫—É—Ä—Å–∞
 * @param lessonId - ID —É—Ä–æ–∫–∞
 * @returns Promise<CourseAccessResult> - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
 */
export async function checkLessonAccess(courseId: string, lessonId: string): Promise<CourseAccessResult> {
  // –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É
  const courseAccess = await checkCourseAccess(courseId)
  
  if (!courseAccess.hasAccess) {
    return courseAccess
  }

  try {
    await connectToDatabase()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ –∫—É—Ä—Å–µ
    const course = await Course.findById(courseId)
    if (!course) {
      return {
        hasAccess: false,
        reason: 'course_not_found',
        message: 'Course not found'
      }
    }

    const lesson = course.lessons.find((l: any) => l.id === lessonId)
    if (!lesson) {
      return {
        hasAccess: false,
        reason: 'course_not_found',
        message: 'Lesson not found in this course'
      }
    }

    return {
      ...courseAccess,
      message: `You have access to lesson: ${lesson.title}`
    }

  } catch (error) {
    console.error('Error checking lesson access:', error)
    return {
      hasAccess: false,
      reason: 'course_not_found',
      message: 'Failed to check lesson access'
    }
  }
} 